diff -r -u php-5.6.24-src-origin\ext\sockets\php_sockets.h php-5.6.24-src\ext\sockets\php_sockets.h
--- php-5.6.24-src-origin\ext\sockets\php_sockets.h	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\ext\sockets\php_sockets.h	Tue Nov 28 00:19:58 2017
@@ -115,6 +115,24 @@

 #endif

+#if(_WIN32_WINNT < 0x0600)
+#define CMSG_SPACE WSA_CMSG_SPACE
+#define CMSG_LEN WSA_CMSG_LEN
+#define CMSG_FIRSTHDR WSA_CMSG_FIRSTHDR
+#define CMSG_NXTHDR WSA_CMSG_NXTHDR
+
+WINAPI if_nametoindex (__in PCSTR iface);
+
+int WSASendMsg(
+    __in SOCKET Handle,
+    __in LPWSAMSG lpMsg,
+    __in DWORD dwFlags,
+    __out_opt LPDWORD lpNumberOfBytesSent,
+    __inout_opt LPWSAOVERLAPPED lpOverlapped,
+    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
+    );
+#endif //_WIN32_WINNT < 0x0600
+
 /*
  * Local variables:
  * tab-width: 4
diff -r -u php-5.6.24-src-origin\ext\sockets\sockets.c php-5.6.24-src\ext\sockets\sockets.c
--- php-5.6.24-src-origin\ext\sockets\sockets.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\ext\sockets\sockets.c	Tue Nov 28 00:19:34 2017
@@ -2308,6 +2308,93 @@
 }
 /* }}} */

+#if (_WIN32_WINNT < 0x0600)
+WINAPI if_nametoindex (__in PCSTR iface)
+{
+    PIP_ADAPTER_ADDRESSES addresses = NULL, p;
+    ulong addresses_len = 0;
+    uint idx = 0;
+    DWORD res;
+
+    res = GetAdaptersAddresses (AF_UNSPEC, 0, NULL, NULL, &addresses_len);
+    if (res != NO_ERROR && res != ERROR_BUFFER_OVERFLOW)
+    {
+        return 0;
+    }
+
+    addresses = malloc (addresses_len);
+    res = GetAdaptersAddresses (AF_UNSPEC, 0, NULL, addresses, &addresses_len);
+
+    if (res != NO_ERROR)
+    {
+        free (addresses);
+        return 0;
+    }
+
+    p = addresses;
+    while (p)
+    {
+        if (strcmp (p->AdapterName, iface) == 0)
+        {
+            idx = p->IfIndex;
+            break;
+        }
+        p = p->Next;
+    }
+
+    free (addresses);
+
+    return idx;
+}
+
+int WSASendMsg(
+    __in SOCKET Handle,
+    __in LPWSAMSG lpMsg,
+    __in DWORD dwFlags,
+    __out_opt LPDWORD lpNumberOfBytesSent,
+    __inout_opt LPWSAOVERLAPPED lpOverlapped,
+    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
+)
+{
+    char tmpbuf[65536];
+    uint32_t tmplen = 0;
+    DWORD i = 0;
+    int res = 0;
+    if (lpMsg == NULL)
+    {
+        return 0;
+    }
+    if (lpOverlapped != NULL)
+    {
+        return 0;
+    }
+    if (lpCompletionRoutine != NULL)
+    {
+        return 0;
+    }
+    for (i = 0; i < lpMsg->dwBufferCount; i++)
+    {
+        WSABUF wsaBuf = lpMsg->lpBuffers[i];
+        if ((tmplen + wsaBuf.len) > sizeof(tmpbuf))
+        {
+            return 0;
+        }
+        memcpy(tmpbuf + tmplen, wsaBuf.buf, wsaBuf.len);
+        tmplen += wsaBuf.len;
+    }
+    res = sendto(Handle, tmpbuf, tmplen, dwFlags, lpMsg->name, lpMsg->namelen);
+    if (res == SOCKET_ERROR)
+    {
+        return res;
+    }
+    if (lpNumberOfBytesSent != NULL)
+    {
+        *lpNumberOfBytesSent = res;
+    }
+    return 0;
+}
+#endif
+
 /*
  * Local variables:
  * tab-width: 4
diff -r -u php-5.6.24-src-origin\ext\standard\info.c php-5.6.24-src\ext\standard\info.c
--- php-5.6.24-src-origin\ext\standard\info.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\ext\standard\info.c	Tue Nov 28 00:18:33 2017
@@ -592,45 +592,6 @@
 				case PRODUCT_STARTER_E:
 					sub = "Hyper Core V Edition";
 					break;
-				case PRODUCT_ENTERPRISE_EVALUATION:
-					sub = "Enterprise Edition (evaluation installation)";
-					break;
-				case PRODUCT_MULTIPOINT_STANDARD_SERVER:
-					sub = "MultiPoint Server Standard Edition (full installation)";
-					break;
-				case PRODUCT_MULTIPOINT_PREMIUM_SERVER:
-					sub = "MultiPoint Server Premium Edition (full installation)";
-					break;
-				case PRODUCT_STANDARD_EVALUATION_SERVER:
-					sub = "Standard Edition (evaluation installation)";
-					break;
-				case PRODUCT_DATACENTER_EVALUATION_SERVER:
-					sub = "Datacenter Edition (evaluation installation)";
-					break;
-				case PRODUCT_ENTERPRISE_N_EVALUATION:
-					sub = "Enterprise N Edition (evaluation installation)";
-					break;
-				case PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER:
-					sub = "Storage Server Workgroup Edition (evaluation installation)";
-					break;
-				case PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER:
-					sub = "Storage Server Standard Edition (evaluation installation)";
-					break;
-				case PRODUCT_CORE_N:
-					sub = "Windows 8 N Edition";
-					break;
-				case PRODUCT_CORE_COUNTRYSPECIFIC:
-					sub = "Windows 8 China Edition";
-					break;
-				case PRODUCT_CORE_SINGLELANGUAGE:
-					sub = "Windows 8 Single Language Edition";
-					break;
-				case PRODUCT_CORE:
-					sub = "Windows 8 Edition";
-					break;
-				case PRODUCT_PROFESSIONAL_WMC:
-					sub = "Professional with Media Center Edition";
-					break;
 			}
 		}

diff -r -u php-5.6.24-src-origin\main\php_open_temporary_file.c php-5.6.24-src\main\php_open_temporary_file.c
--- php-5.6.24-src-origin\main\php_open_temporary_file.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\main\php_open_temporary_file.c	Tue Nov 28 00:14:09 2017
@@ -57,6 +57,10 @@
 #define P_tmpdir ""
 #endif

+#if defined(ZTS) && defined(PHP_WIN32)
+#include "tls_var.h"
+#endif
+
 /* {{{ php_do_open_temporary_file */

 /* Loosely based on a tempnam() implementation by UCLA */
@@ -179,7 +183,8 @@
 static
 #ifdef ZTS
 #ifdef PHP_WIN32
-__declspec(thread)
+#define TLS_TEMPORARY_DIRECTORY
+TLSVar tls_temporary_directory = {0};
 #elif defined(__GNUC__)
 __thread
 #endif
@@ -188,6 +193,9 @@

 PHPAPI void php_shutdown_temporary_directory(void)
 {
+#ifdef TLS_TEMPORARY_DIRECTORY
+	temporary_directory = (char*)tls_get(&tls_temporary_directory);
+#endif
 	if (temporary_directory) {
 		efree(temporary_directory);
 		temporary_directory = NULL;
@@ -199,8 +207,15 @@
  */
 PHPAPI const char* php_get_temporary_directory(TSRMLS_D)
 {
+#ifdef TLS_TEMPORARY_DIRECTORY
+	tls_init(&temporary_directory);
+	temporary_directory = (char*)tls_get(&tls_temporary_directory);
+#endif
 	/* Did we determine the temporary directory already? */
 	if (temporary_directory) {
+#ifdef TLS_TEMPORARY_DIRECTORY
+		tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 		return temporary_directory;
 	}

@@ -211,9 +226,15 @@
 			int len = strlen(sys_temp_dir);
 			if (len >= 2 && sys_temp_dir[len - 1] == DEFAULT_SLASH) {
 				temporary_directory = estrndup(sys_temp_dir, len - 1);
+#ifdef TLS_TEMPORARY_DIRECTORY
+				tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 				return temporary_directory;
 			} else if (len >= 1 && sys_temp_dir[len - 1] != DEFAULT_SLASH) {
 				temporary_directory = estrndup(sys_temp_dir, len);
+#ifdef TLS_TEMPORARY_DIRECTORY
+				tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 				return temporary_directory;
 			}
 		}
@@ -234,6 +255,9 @@
 		} else {
 			temporary_directory = estrndup(sTemp, len);
 		}
+#ifdef TLS_TEMPORARY_DIRECTORY
+		tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 		return temporary_directory;
 	}
 #else
@@ -248,7 +272,9 @@
 			} else {
 				temporary_directory = estrndup(s, len);
 			}
-
+#ifdef TLS_TEMPORARY_DIRECTORY
+			tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 			return temporary_directory;
 		}
 	}
@@ -256,11 +282,17 @@
 	/* Use the standard default temporary directory. */
 	if (P_tmpdir) {
 		temporary_directory = estrdup(P_tmpdir);
+#ifdef TLS_TEMPORARY_DIRECTORY
+		tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 		return temporary_directory;
 	}
 #endif
 	/* Shouldn't ever(!) end up here ... last ditch default. */
 	temporary_directory = estrndup("/tmp", sizeof("/tmp"));
+#ifdef TLS_TEMPORARY_DIRECTORY
+	tls_set(&tls_temporary_directory, temporary_directory);
+#endif
 	return temporary_directory;
 #endif
 }
Only in php-5.6.24-src\main: tls_var.c
Only in php-5.6.24-src\main: tls_var.h
diff -r -u php-5.6.24-src-origin\win32\build\config.w32 php-5.6.24-src\win32\build\config.w32
--- php-5.6.24-src-origin\win32\build\config.w32	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\win32\build\config.w32	Mon Nov 27 23:54:41 2017
@@ -131,7 +131,7 @@
 DEFINE("BASE_INCLUDES", "/I . /I main /I Zend /I TSRM /I ext ");

 // CFLAGS for building the PHP dll
-DEFINE("CFLAGS_PHP", "/D _USRDLL /D PHP5DLLTS_EXPORTS /D PHP_EXPORTS \
+DEFINE("CFLAGS_PHP", "/D _USING_V110_SDK71_ /D _USRDLL /D PHP5DLLTS_EXPORTS /D PHP_EXPORTS \
 /D LIBZEND_EXPORTS /D TSRM_EXPORTS /D SAPI_EXPORTS /D WINVER=0x500");

 DEFINE('CFLAGS_PHP_OBJ', '$(CFLAGS_PHP) $(STATIC_EXT_CFLAGS)');
@@ -300,7 +300,12 @@
 var php_usual_lib_suspects = PHP_PHP_BUILD+"\\lib";

 ADD_FLAG("CFLAGS", '/I "' + php_usual_include_suspects + '" ');
-ADD_FLAG("LDFLAGS", '/libpath:"' + php_usual_lib_suspects + '" ');
+
+if (X64) {
+    ADD_FLAG("LDFLAGS", '/SUBSYSTEM:CONSOLE,5.02 /libpath:"' + php_usual_lib_suspects + '" ');
+} else {
+    ADD_FLAG("LDFLAGS", '/SUBSYSTEM:CONSOLE,5.01 /libpath:"' + php_usual_lib_suspects + '" ');
+}

 // Poke around for some headers
 function probe_basic_headers()
@@ -371,7 +376,7 @@
 ADD_SOURCES("main", "main.c snprintf.c spprintf.c getopt.c fopen_wrappers.c \
 	php_scandir.c php_ini.c SAPI.c rfc1867.c php_content_types.c strlcpy.c \
 	strlcat.c mergesort.c reentrancy.c php_variables.c php_ticks.c network.c \
-	php_open_temporary_file.c output.c internal_functions.c php_sprintf.c");
+	php_open_temporary_file.c tls_var.c output.c internal_functions.c php_sprintf.c");
 ADD_SOURCES("win32", "inet.c fnmatch.c sockets.c");

 // Newer versions have it
diff -r -u php-5.6.24-src-origin\win32\build\config.w32.h.in php-5.6.24-src\win32\build\config.w32.h.in
--- php-5.6.24-src-origin\win32\build\config.w32.h.in	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\win32\build\config.w32.h.in	Mon Nov 27 23:50:38 2017
@@ -6,8 +6,8 @@
 /* Define the minimum supported version */
 #undef _WIN32_WINNT
 #undef NTDDI_VERSION
-#define _WIN32_WINNT 0x0600
-#define NTDDI_VERSION  0x06000100
+#define _WIN32_WINNT _WIN32_WINNT_WINXP
+#define NTDDI_VERSION  NTDDI_WINXP

 /* Default PHP / PEAR directories */
 #define PHP_CONFIG_FILE_PATH (getenv("SystemRoot"))?getenv("SystemRoot"):""
diff -r -u php-5.6.24-src-origin\win32\inet.c php-5.6.24-src\win32\inet.c
--- php-5.6.24-src-origin\win32\inet.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\win32\inet.c	Wed Nov 21 06:12:20 2012
@@ -1,5 +1,81 @@
+#include "config.w32.h"
+#if (_WIN32_WINNT < 0x0600) /* Vista/2k8 have these functions */
+#include "php.h"
+#include <winsock2.h>
+#include <windows.h>
+#include <Ws2tcpip.h>
+
 #include "inet.h"

+PHPAPI int inet_pton(int af, const char* src, void* dst)
+{
+	int address_length;
+	struct sockaddr_storage sa;
+	struct sockaddr_in *sin = (struct sockaddr_in *)&sa;
+	struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)&sa;
+
+	switch (af) {
+		case AF_INET:
+			address_length = sizeof (struct sockaddr_in);
+			break;
+
+		case AF_INET6:
+			address_length = sizeof (struct sockaddr_in6);
+			break;
+
+		default:
+			return -1;
+	}
+
+	if (WSAStringToAddress ((LPTSTR) src, af, NULL, (LPSOCKADDR) &sa, &address_length) == 0) {
+		switch (af) {
+			case AF_INET:
+				memcpy (dst, &sin->sin_addr, sizeof (struct in_addr));
+				break;
+
+			case AF_INET6:
+				memcpy (dst, &sin6->sin6_addr, sizeof (struct in6_addr));
+				break;
+		}
+		return 1;
+	}
+
+	return 0;
+}
+
+PHPAPI const char* inet_ntop(int af, const void* src, char* dst, size_t size)
+{
+	int address_length;
+	DWORD string_length = size;
+	struct sockaddr_storage sa;
+	struct sockaddr_in *sin = (struct sockaddr_in *)&sa;
+	struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)&sa;
+
+	memset (&sa, 0, sizeof (sa));
+	switch (af) {
+		case AF_INET:
+			address_length = sizeof (struct sockaddr_in);
+			sin->sin_family = af;
+			memcpy (&sin->sin_addr, src, sizeof (struct in_addr));
+			break;
+
+		case AF_INET6:
+			address_length = sizeof (struct sockaddr_in6);
+			sin6->sin6_family = af;
+			memcpy (&sin6->sin6_addr, src, sizeof (struct in6_addr));
+			break;
+
+		default:
+			return NULL;
+	}
+
+	if (WSAAddressToString ((LPSOCKADDR) &sa, address_length, NULL, dst, &string_length) == 0) {
+		return dst;
+	}
+
+	return NULL;
+}
+
 int inet_aton(const char *cp, struct in_addr *inp) {
   inp->s_addr = inet_addr(cp);

@@ -9,3 +85,4 @@

   return 1;
 }
+#endif
diff -r -u php-5.6.24-src-origin\win32\inet.h php-5.6.24-src\win32\inet.h
--- php-5.6.24-src-origin\win32\inet.h	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\win32\inet.h	Wed Nov 21 06:12:20 2012
@@ -1,4 +1,10 @@
-#include <php.h>
-#include <Winsock2.h>
+#if _MSC_VER >= 1500
+# include <In6addr.h>
+#endif
+#include <Ws2tcpip.h>

+#if (_WIN32_WINNT < 0x0600)
+PHPAPI int inet_pton(int af, const char* src, void* dst);
+PHPAPI const char* inet_ntop(int af, const void* src, char* dst, size_t size);
 PHPAPI int inet_aton(const char *cp, struct in_addr *inp);
+#endif
diff -r -u php-5.6.24-src-origin\win32\select.c php-5.6.24-src\win32\select.c
--- php-5.6.24-src-origin\win32\select.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\win32\select.c	Mon Nov 27 23:55:25 2017
@@ -36,7 +36,7 @@
  * */
 PHPAPI int php_select(int max_fd, fd_set *rfds, fd_set *wfds, fd_set *efds, struct timeval *tv)
 {
-	ULONGLONG ms_total, limit;
+	DWORD ms_total, limit;
 	HANDLE handles[MAXIMUM_WAIT_OBJECTS];
 	int handle_slot_to_fd[MAXIMUM_WAIT_OBJECTS];
 	int n_handles = 0, i;
@@ -97,7 +97,7 @@
 	FD_ZERO(&awrite);
 	FD_ZERO(&aexcept);

-	limit = GetTickCount64() + ms_total;
+	limit = GetTickCount() + ms_total;
 	do {
 		retcode = 0;

@@ -149,7 +149,7 @@
 				}
 			}
 		}
-	} while (retcode == 0 && (ms_total == INFINITE || GetTickCount64() < limit));
+	} while (retcode == 0 && (ms_total == INFINITE || GetTickCount() < limit));

 	if (rfds) {
 		*rfds = aread;
diff -r -u php-5.6.24-src-origin\Zend\zend_execute_API.c php-5.6.24-src\Zend\zend_execute_API.c
--- php-5.6.24-src-origin\Zend\zend_execute_API.c	Wed Jul 20 17:23:04 2016
+++ php-5.6.24-src\Zend\zend_execute_API.c	Mon Nov 27 23:44:51 2017
@@ -38,6 +38,10 @@
 #include <sys/time.h>
 #endif

+#if defined(ZTS) && defined(PHP_WIN32)
+#include "../main/tls_var.h"
+#endif
+
 ZEND_API void (*zend_execute_ex)(zend_execute_data *execute_data TSRMLS_DC);
 ZEND_API void (*zend_execute_internal)(zend_execute_data *execute_data_ptr, zend_fcall_info *fci, int return_value_used TSRMLS_DC);

@@ -47,7 +51,8 @@

 #ifdef ZEND_WIN32
 #ifdef ZTS
-__declspec(thread)
+#define TLS_TQ_TIMER
+TLSVar tls_tq_timer = {0};
 #endif
 HANDLE tq_timer = NULL;
 #endif
@@ -1262,6 +1267,11 @@
 		return;
 	}

+#ifdef TLS_TQ_TIMER
+	tls_init(&tls_tq_timer);
+	tq_timer = (HANDLE)tls_get(&tls_tq_timer);
+#endif
+
         /* Don't use ChangeTimerQueueTimer() as it will not restart an expired
 		timer, so we could end up with just an ignored timeout. Instead
 		delete and recreate. */
@@ -1269,16 +1279,25 @@
 		if (!DeleteTimerQueueTimer(NULL, tq_timer, NULL)) {
 			EG(timed_out) = 0;
 			tq_timer = NULL;
+#ifdef TLS_TQ_TIMER
+			tls_set(&tls_tq_timer, tq_timer);
+#endif
 			zend_error(E_ERROR, "Could not delete queued timer");
 			return;
 		}
 		tq_timer = NULL;
+#ifdef TLS_TQ_TIMER
+		tls_set(&tls_tq_timer, tq_timer);
+#endif
 	}

 	/* XXX passing NULL means the default timer queue provided by the system is used */
 	if (!CreateTimerQueueTimer(&tq_timer, NULL, (WAITORTIMERCALLBACK)tq_timer_cb, (VOID*)&EG(timed_out), seconds*1000, 0, WT_EXECUTEONLYONCE)) {
 		EG(timed_out) = 0;
 		tq_timer = NULL;
+#ifdef TLS_TQ_TIMER
+		tls_set(&tls_tq_timer, tq_timer);
+#endif
 		zend_error(E_ERROR, "Could not queue new timer");
 		return;
 	}
@@ -1323,15 +1342,26 @@

 void zend_unset_timeout(TSRMLS_D) /* {{{ */
 {
+#ifdef TLS_TQ_TIMER
+	tls_init(&tls_tq_timer);
+	tq_timer = (HANDLE)tls_get(&tls_tq_timer);
+#endif
+
 #ifdef ZEND_WIN32
 	if (NULL != tq_timer) {
 		if (!DeleteTimerQueueTimer(NULL, tq_timer, NULL)) {
 			EG(timed_out) = 0;
 			tq_timer = NULL;
+#ifdef TLS_TQ_TIMER
+			tls_set(&tls_tq_timer, tq_timer);
+#endif
 			zend_error(E_ERROR, "Could not delete queued timer");
 			return;
 		}
 		tq_timer = NULL;
+#ifdef TLS_TQ_TIMER
+		tls_set(&tls_tq_timer, tq_timer);
+#endif
 	}
 	EG(timed_out) = 0;
 #else
